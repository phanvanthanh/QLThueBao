//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace SilverlightQLThuebao.UploadService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadFile", Namespace="http://schemas.datacontract.org/2004/07/SilverlightQLThuebao.Web")]
    public partial class UploadFile : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string FileStoreUrlField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileStoreUrl {
            get {
                return this.FileStoreUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FileStoreUrlField, value) != true)) {
                    this.FileStoreUrlField = value;
                    this.RaisePropertyChanged("FileStoreUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PictureFile", Namespace="http://schemas.datacontract.org/2004/07/SilverlightQLThuebao.Web")]
    public partial class PictureFile : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string PictureNameField;
        
        private byte[] PictureStreamField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PictureName {
            get {
                return this.PictureNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureNameField, value) != true)) {
                    this.PictureNameField = value;
                    this.RaisePropertyChanged("PictureName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] PictureStream {
            get {
                return this.PictureStreamField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureStreamField, value) != true)) {
                    this.PictureStreamField = value;
                    this.RaisePropertyChanged("PictureStream");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="UploadService.Upload")]
    public interface Upload {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Upload/DoUpload", ReplyAction="urn:Upload/DoUploadResponse")]
        System.IAsyncResult BeginDoUpload(string filename, byte[] content, bool append, string foldertemp, System.AsyncCallback callback, object asyncState);
        
        SilverlightQLThuebao.UploadService.UploadFile EndDoUpload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Upload/Download", ReplyAction="urn:Upload/DownloadResponse")]
        System.IAsyncResult BeginDownload(string pictureName, System.AsyncCallback callback, object asyncState);
        
        SilverlightQLThuebao.UploadService.PictureFile EndDownload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Upload/Rename", ReplyAction="urn:Upload/RenameResponse")]
        System.IAsyncResult BeginRename(string pictureName, string filename, string ffolder, string subf, System.AsyncCallback callback, object asyncState);
        
        SilverlightQLThuebao.UploadService.PictureFile EndRename(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Upload/DeleFolder", ReplyAction="urn:Upload/DeleFolderResponse")]
        System.IAsyncResult BeginDeleFolder(string subf, System.AsyncCallback callback, object asyncState);
        
        SilverlightQLThuebao.UploadService.PictureFile EndDeleFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Upload/DeleFile", ReplyAction="urn:Upload/DeleFileResponse")]
        System.IAsyncResult BeginDeleFile(string filename, System.AsyncCallback callback, object asyncState);
        
        SilverlightQLThuebao.UploadService.PictureFile EndDeleFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Upload/GetDateTime", ReplyAction="urn:Upload/GetDateTimeResponse")]
        System.IAsyncResult BeginGetDateTime(System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndGetDateTime(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Upload/GetSessionTimeOut", ReplyAction="urn:Upload/GetSessionTimeOutResponse")]
        System.IAsyncResult BeginGetSessionTimeOut(System.AsyncCallback callback, object asyncState);
        
        int EndGetSessionTimeOut(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:Upload/DoWork", ReplyAction="urn:Upload/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        string EndDoWork(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UploadChannel : SilverlightQLThuebao.UploadService.Upload, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightQLThuebao.UploadService.UploadFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightQLThuebao.UploadService.UploadFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightQLThuebao.UploadService.PictureFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightQLThuebao.UploadService.PictureFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RenameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RenameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightQLThuebao.UploadService.PictureFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightQLThuebao.UploadService.PictureFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightQLThuebao.UploadService.PictureFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightQLThuebao.UploadService.PictureFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightQLThuebao.UploadService.PictureFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightQLThuebao.UploadService.PictureFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSessionTimeOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSessionTimeOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadClient : System.ServiceModel.ClientBase<SilverlightQLThuebao.UploadService.Upload>, SilverlightQLThuebao.UploadService.Upload {
        
        private BeginOperationDelegate onBeginDoUploadDelegate;
        
        private EndOperationDelegate onEndDoUploadDelegate;
        
        private System.Threading.SendOrPostCallback onDoUploadCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadDelegate;
        
        private EndOperationDelegate onEndDownloadDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadCompletedDelegate;
        
        private BeginOperationDelegate onBeginRenameDelegate;
        
        private EndOperationDelegate onEndRenameDelegate;
        
        private System.Threading.SendOrPostCallback onRenameCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleFolderDelegate;
        
        private EndOperationDelegate onEndDeleFolderDelegate;
        
        private System.Threading.SendOrPostCallback onDeleFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleFileDelegate;
        
        private EndOperationDelegate onEndDeleFileDelegate;
        
        private System.Threading.SendOrPostCallback onDeleFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDateTimeDelegate;
        
        private EndOperationDelegate onEndGetDateTimeDelegate;
        
        private System.Threading.SendOrPostCallback onGetDateTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSessionTimeOutDelegate;
        
        private EndOperationDelegate onEndGetSessionTimeOutDelegate;
        
        private System.Threading.SendOrPostCallback onGetSessionTimeOutCompletedDelegate;
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public UploadClient() {
        }
        
        public UploadClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UploadClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<DoUploadCompletedEventArgs> DoUploadCompleted;
        
        public event System.EventHandler<DownloadCompletedEventArgs> DownloadCompleted;
        
        public event System.EventHandler<RenameCompletedEventArgs> RenameCompleted;
        
        public event System.EventHandler<DeleFolderCompletedEventArgs> DeleFolderCompleted;
        
        public event System.EventHandler<DeleFileCompletedEventArgs> DeleFileCompleted;
        
        public event System.EventHandler<GetDateTimeCompletedEventArgs> GetDateTimeCompleted;
        
        public event System.EventHandler<GetSessionTimeOutCompletedEventArgs> GetSessionTimeOutCompleted;
        
        public event System.EventHandler<DoWorkCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightQLThuebao.UploadService.Upload.BeginDoUpload(string filename, byte[] content, bool append, string foldertemp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoUpload(filename, content, append, foldertemp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightQLThuebao.UploadService.UploadFile SilverlightQLThuebao.UploadService.Upload.EndDoUpload(System.IAsyncResult result) {
            return base.Channel.EndDoUpload(result);
        }
        
        private System.IAsyncResult OnBeginDoUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filename = ((string)(inValues[0]));
            byte[] content = ((byte[])(inValues[1]));
            bool append = ((bool)(inValues[2]));
            string foldertemp = ((string)(inValues[3]));
            return ((SilverlightQLThuebao.UploadService.Upload)(this)).BeginDoUpload(filename, content, append, foldertemp, callback, asyncState);
        }
        
        private object[] OnEndDoUpload(System.IAsyncResult result) {
            SilverlightQLThuebao.UploadService.UploadFile retVal = ((SilverlightQLThuebao.UploadService.Upload)(this)).EndDoUpload(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoUploadCompleted(object state) {
            if ((this.DoUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoUploadCompleted(this, new DoUploadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoUploadAsync(string filename, byte[] content, bool append, string foldertemp) {
            this.DoUploadAsync(filename, content, append, foldertemp, null);
        }
        
        public void DoUploadAsync(string filename, byte[] content, bool append, string foldertemp, object userState) {
            if ((this.onBeginDoUploadDelegate == null)) {
                this.onBeginDoUploadDelegate = new BeginOperationDelegate(this.OnBeginDoUpload);
            }
            if ((this.onEndDoUploadDelegate == null)) {
                this.onEndDoUploadDelegate = new EndOperationDelegate(this.OnEndDoUpload);
            }
            if ((this.onDoUploadCompletedDelegate == null)) {
                this.onDoUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoUploadCompleted);
            }
            base.InvokeAsync(this.onBeginDoUploadDelegate, new object[] {
                        filename,
                        content,
                        append,
                        foldertemp}, this.onEndDoUploadDelegate, this.onDoUploadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightQLThuebao.UploadService.Upload.BeginDownload(string pictureName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownload(pictureName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightQLThuebao.UploadService.PictureFile SilverlightQLThuebao.UploadService.Upload.EndDownload(System.IAsyncResult result) {
            return base.Channel.EndDownload(result);
        }
        
        private System.IAsyncResult OnBeginDownload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string pictureName = ((string)(inValues[0]));
            return ((SilverlightQLThuebao.UploadService.Upload)(this)).BeginDownload(pictureName, callback, asyncState);
        }
        
        private object[] OnEndDownload(System.IAsyncResult result) {
            SilverlightQLThuebao.UploadService.PictureFile retVal = ((SilverlightQLThuebao.UploadService.Upload)(this)).EndDownload(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownloadCompleted(object state) {
            if ((this.DownloadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadCompleted(this, new DownloadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadAsync(string pictureName) {
            this.DownloadAsync(pictureName, null);
        }
        
        public void DownloadAsync(string pictureName, object userState) {
            if ((this.onBeginDownloadDelegate == null)) {
                this.onBeginDownloadDelegate = new BeginOperationDelegate(this.OnBeginDownload);
            }
            if ((this.onEndDownloadDelegate == null)) {
                this.onEndDownloadDelegate = new EndOperationDelegate(this.OnEndDownload);
            }
            if ((this.onDownloadCompletedDelegate == null)) {
                this.onDownloadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadDelegate, new object[] {
                        pictureName}, this.onEndDownloadDelegate, this.onDownloadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightQLThuebao.UploadService.Upload.BeginRename(string pictureName, string filename, string ffolder, string subf, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRename(pictureName, filename, ffolder, subf, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightQLThuebao.UploadService.PictureFile SilverlightQLThuebao.UploadService.Upload.EndRename(System.IAsyncResult result) {
            return base.Channel.EndRename(result);
        }
        
        private System.IAsyncResult OnBeginRename(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string pictureName = ((string)(inValues[0]));
            string filename = ((string)(inValues[1]));
            string ffolder = ((string)(inValues[2]));
            string subf = ((string)(inValues[3]));
            return ((SilverlightQLThuebao.UploadService.Upload)(this)).BeginRename(pictureName, filename, ffolder, subf, callback, asyncState);
        }
        
        private object[] OnEndRename(System.IAsyncResult result) {
            SilverlightQLThuebao.UploadService.PictureFile retVal = ((SilverlightQLThuebao.UploadService.Upload)(this)).EndRename(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRenameCompleted(object state) {
            if ((this.RenameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RenameCompleted(this, new RenameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RenameAsync(string pictureName, string filename, string ffolder, string subf) {
            this.RenameAsync(pictureName, filename, ffolder, subf, null);
        }
        
        public void RenameAsync(string pictureName, string filename, string ffolder, string subf, object userState) {
            if ((this.onBeginRenameDelegate == null)) {
                this.onBeginRenameDelegate = new BeginOperationDelegate(this.OnBeginRename);
            }
            if ((this.onEndRenameDelegate == null)) {
                this.onEndRenameDelegate = new EndOperationDelegate(this.OnEndRename);
            }
            if ((this.onRenameCompletedDelegate == null)) {
                this.onRenameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRenameCompleted);
            }
            base.InvokeAsync(this.onBeginRenameDelegate, new object[] {
                        pictureName,
                        filename,
                        ffolder,
                        subf}, this.onEndRenameDelegate, this.onRenameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightQLThuebao.UploadService.Upload.BeginDeleFolder(string subf, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleFolder(subf, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightQLThuebao.UploadService.PictureFile SilverlightQLThuebao.UploadService.Upload.EndDeleFolder(System.IAsyncResult result) {
            return base.Channel.EndDeleFolder(result);
        }
        
        private System.IAsyncResult OnBeginDeleFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string subf = ((string)(inValues[0]));
            return ((SilverlightQLThuebao.UploadService.Upload)(this)).BeginDeleFolder(subf, callback, asyncState);
        }
        
        private object[] OnEndDeleFolder(System.IAsyncResult result) {
            SilverlightQLThuebao.UploadService.PictureFile retVal = ((SilverlightQLThuebao.UploadService.Upload)(this)).EndDeleFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleFolderCompleted(object state) {
            if ((this.DeleFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleFolderCompleted(this, new DeleFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleFolderAsync(string subf) {
            this.DeleFolderAsync(subf, null);
        }
        
        public void DeleFolderAsync(string subf, object userState) {
            if ((this.onBeginDeleFolderDelegate == null)) {
                this.onBeginDeleFolderDelegate = new BeginOperationDelegate(this.OnBeginDeleFolder);
            }
            if ((this.onEndDeleFolderDelegate == null)) {
                this.onEndDeleFolderDelegate = new EndOperationDelegate(this.OnEndDeleFolder);
            }
            if ((this.onDeleFolderCompletedDelegate == null)) {
                this.onDeleFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleFolderCompleted);
            }
            base.InvokeAsync(this.onBeginDeleFolderDelegate, new object[] {
                        subf}, this.onEndDeleFolderDelegate, this.onDeleFolderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightQLThuebao.UploadService.Upload.BeginDeleFile(string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleFile(filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightQLThuebao.UploadService.PictureFile SilverlightQLThuebao.UploadService.Upload.EndDeleFile(System.IAsyncResult result) {
            return base.Channel.EndDeleFile(result);
        }
        
        private System.IAsyncResult OnBeginDeleFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filename = ((string)(inValues[0]));
            return ((SilverlightQLThuebao.UploadService.Upload)(this)).BeginDeleFile(filename, callback, asyncState);
        }
        
        private object[] OnEndDeleFile(System.IAsyncResult result) {
            SilverlightQLThuebao.UploadService.PictureFile retVal = ((SilverlightQLThuebao.UploadService.Upload)(this)).EndDeleFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleFileCompleted(object state) {
            if ((this.DeleFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleFileCompleted(this, new DeleFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleFileAsync(string filename) {
            this.DeleFileAsync(filename, null);
        }
        
        public void DeleFileAsync(string filename, object userState) {
            if ((this.onBeginDeleFileDelegate == null)) {
                this.onBeginDeleFileDelegate = new BeginOperationDelegate(this.OnBeginDeleFile);
            }
            if ((this.onEndDeleFileDelegate == null)) {
                this.onEndDeleFileDelegate = new EndOperationDelegate(this.OnEndDeleFile);
            }
            if ((this.onDeleFileCompletedDelegate == null)) {
                this.onDeleFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleFileCompleted);
            }
            base.InvokeAsync(this.onBeginDeleFileDelegate, new object[] {
                        filename}, this.onEndDeleFileDelegate, this.onDeleFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightQLThuebao.UploadService.Upload.BeginGetDateTime(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDateTime(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime SilverlightQLThuebao.UploadService.Upload.EndGetDateTime(System.IAsyncResult result) {
            return base.Channel.EndGetDateTime(result);
        }
        
        private System.IAsyncResult OnBeginGetDateTime(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightQLThuebao.UploadService.Upload)(this)).BeginGetDateTime(callback, asyncState);
        }
        
        private object[] OnEndGetDateTime(System.IAsyncResult result) {
            System.DateTime retVal = ((SilverlightQLThuebao.UploadService.Upload)(this)).EndGetDateTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDateTimeCompleted(object state) {
            if ((this.GetDateTimeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDateTimeCompleted(this, new GetDateTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDateTimeAsync() {
            this.GetDateTimeAsync(null);
        }
        
        public void GetDateTimeAsync(object userState) {
            if ((this.onBeginGetDateTimeDelegate == null)) {
                this.onBeginGetDateTimeDelegate = new BeginOperationDelegate(this.OnBeginGetDateTime);
            }
            if ((this.onEndGetDateTimeDelegate == null)) {
                this.onEndGetDateTimeDelegate = new EndOperationDelegate(this.OnEndGetDateTime);
            }
            if ((this.onGetDateTimeCompletedDelegate == null)) {
                this.onGetDateTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDateTimeCompleted);
            }
            base.InvokeAsync(this.onBeginGetDateTimeDelegate, null, this.onEndGetDateTimeDelegate, this.onGetDateTimeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightQLThuebao.UploadService.Upload.BeginGetSessionTimeOut(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSessionTimeOut(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SilverlightQLThuebao.UploadService.Upload.EndGetSessionTimeOut(System.IAsyncResult result) {
            return base.Channel.EndGetSessionTimeOut(result);
        }
        
        private System.IAsyncResult OnBeginGetSessionTimeOut(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightQLThuebao.UploadService.Upload)(this)).BeginGetSessionTimeOut(callback, asyncState);
        }
        
        private object[] OnEndGetSessionTimeOut(System.IAsyncResult result) {
            int retVal = ((SilverlightQLThuebao.UploadService.Upload)(this)).EndGetSessionTimeOut(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSessionTimeOutCompleted(object state) {
            if ((this.GetSessionTimeOutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSessionTimeOutCompleted(this, new GetSessionTimeOutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSessionTimeOutAsync() {
            this.GetSessionTimeOutAsync(null);
        }
        
        public void GetSessionTimeOutAsync(object userState) {
            if ((this.onBeginGetSessionTimeOutDelegate == null)) {
                this.onBeginGetSessionTimeOutDelegate = new BeginOperationDelegate(this.OnBeginGetSessionTimeOut);
            }
            if ((this.onEndGetSessionTimeOutDelegate == null)) {
                this.onEndGetSessionTimeOutDelegate = new EndOperationDelegate(this.OnEndGetSessionTimeOut);
            }
            if ((this.onGetSessionTimeOutCompletedDelegate == null)) {
                this.onGetSessionTimeOutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSessionTimeOutCompleted);
            }
            base.InvokeAsync(this.onBeginGetSessionTimeOutDelegate, null, this.onEndGetSessionTimeOutDelegate, this.onGetSessionTimeOutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightQLThuebao.UploadService.Upload.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SilverlightQLThuebao.UploadService.Upload.EndDoWork(System.IAsyncResult result) {
            return base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightQLThuebao.UploadService.Upload)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            string retVal = ((SilverlightQLThuebao.UploadService.Upload)(this)).EndDoWork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new DoWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightQLThuebao.UploadService.Upload CreateChannel() {
            return new UploadClientChannel(this);
        }
        
        private class UploadClientChannel : ChannelBase<SilverlightQLThuebao.UploadService.Upload>, SilverlightQLThuebao.UploadService.Upload {
            
            public UploadClientChannel(System.ServiceModel.ClientBase<SilverlightQLThuebao.UploadService.Upload> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoUpload(string filename, byte[] content, bool append, string foldertemp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = filename;
                _args[1] = content;
                _args[2] = append;
                _args[3] = foldertemp;
                System.IAsyncResult _result = base.BeginInvoke("DoUpload", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightQLThuebao.UploadService.UploadFile EndDoUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightQLThuebao.UploadService.UploadFile _result = ((SilverlightQLThuebao.UploadService.UploadFile)(base.EndInvoke("DoUpload", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDownload(string pictureName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = pictureName;
                System.IAsyncResult _result = base.BeginInvoke("Download", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightQLThuebao.UploadService.PictureFile EndDownload(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightQLThuebao.UploadService.PictureFile _result = ((SilverlightQLThuebao.UploadService.PictureFile)(base.EndInvoke("Download", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRename(string pictureName, string filename, string ffolder, string subf, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = pictureName;
                _args[1] = filename;
                _args[2] = ffolder;
                _args[3] = subf;
                System.IAsyncResult _result = base.BeginInvoke("Rename", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightQLThuebao.UploadService.PictureFile EndRename(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightQLThuebao.UploadService.PictureFile _result = ((SilverlightQLThuebao.UploadService.PictureFile)(base.EndInvoke("Rename", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleFolder(string subf, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = subf;
                System.IAsyncResult _result = base.BeginInvoke("DeleFolder", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightQLThuebao.UploadService.PictureFile EndDeleFolder(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightQLThuebao.UploadService.PictureFile _result = ((SilverlightQLThuebao.UploadService.PictureFile)(base.EndInvoke("DeleFolder", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleFile(string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = filename;
                System.IAsyncResult _result = base.BeginInvoke("DeleFile", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightQLThuebao.UploadService.PictureFile EndDeleFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightQLThuebao.UploadService.PictureFile _result = ((SilverlightQLThuebao.UploadService.PictureFile)(base.EndInvoke("DeleFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDateTime(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDateTime", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndGetDateTime(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("GetDateTime", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSessionTimeOut(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSessionTimeOut", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetSessionTimeOut(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetSessionTimeOut", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DoWork", _args, result)));
                return _result;
            }
        }
    }
}
